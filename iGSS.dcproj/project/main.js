/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

// The current user's username.
var username;
// The current user's authentication token.
var token;

var listController = {
    // This object acts as a controller for the list UI.
    // It implements the dataSource methods for the list.
    
    numberOfRows: function() {
        // The List calls this dataSource method to find out how many rows should be in the list.
        return gss.items.length;
    },
    
    prepareRow: function(rowElement, rowIndex, templateElements) {
        // The List calls this dataSource method for every row.  templateElements contains references to all elements inside the template that have an id. We use it to fill in the text of the rowTitle element.
        if (templateElements.rowTitle) {
            templateElements.rowTitle.innerText = gss.items[rowIndex].name;
        }

        // We also assign an onclick handler that will cause the browser to go to the next page.
        var self = this;
        var handler = function() {
            var item = gss.items[rowIndex];
            var browser = document.getElementById('browser').object;
            if (item.name == 'Files')
                gss.fetchFiles();
            else if (item.name == 'Trash')
                gss.fetchTrash();
            else if (item.name == 'Shared')
                gss.fetchShared();
            else if (item.name == 'Others')
                gss.fetchOthers();
            else if (item.name == 'Groups')
                gss.fetchGroups();
            else if (item.data) {
                // File
                detailController.populate(item.data);
                gss.fetchFile(item.location);
            } else
                // Folder
                gss.fetchFolder(item.location);
        };
        rowElement.onclick = handler;
    }
};

var detailController = {
    // This object acts as a controller for the detail UI.
    
    populate: function(item) {
        this._item = item;
        
        // When the park is set, this controller also updates the DOM for the detail page appropriately.  As you customize the design for the detail page, you will want to extend this code to make sure that the correct information is populated into the detail UI.
        var detailTitle = document.getElementById('detailTitle');
        detailTitle.innerHTML = this._item.name;
        var detailOwner = document.getElementById('detailOwner');
        detailOwner.innerHTML = this._item.owner;
        var detailDescription = document.getElementById('detailDescription');
        alert(JSON.stringify(this._item));
        var resource = this._item.folder.uri + this._item.name;
        // If the resource is an absolute URI, remove the GSS_URL.
        if (resource.indexOf(gss.GSS_URL) == 0)
            resource = resource.slice(gss.GSS_URL.length, resource.length);
        resource = decodeURI(resource);
        var now = (new Date()).toUTCString();
        var sig = gss.sign('GET', now, resource, gss.token);
        var authparam = encodeURI("Authorization=" + this._item.owner + " " + sig);
        var dateparam = encodeURI("Date=" + now);
        var param = "?" + authparam + "&" + dateparam;
        detailDescription.innerHTML = "<a href='" + this._item.folder.uri + this._item.name + param + "'>Download</a>";
    }
    
};

// Called by HTML body element's onload event when the web application is ready to start.
function load() {
    if (!username || ! token) {
        var allcookies = document.cookie;
        var pos = allcookies.indexOf("_gss_a=");
        if (pos != -1) {
            var start = pos + 7;
            var end = allcookies.indexOf(";", start);
            if (end == -1)
                end = allcookies.length;
            var gsscookie = allcookies.substring(start, end);
            gsscookie = decodeURIComponent(gsscookie);
            var values = gsscookie.split('|');
            username = values[0];
            token = values[1];
            // Delete the cookie value.
            document.cookie = "_gss_a=;max-age=-1;domain=pithos.grnet.gr;path=/i/";
        } else {
            location = "https://pithos.grnet.gr/pithos/login?next=http://pithos.grnet.gr/i/";
        }
    }
    dashcode.setupParts();
    gss.username = username;
    gss.token = token;
    gss.fetchUser();
    var loading = document.getElementById('activityIndicator').object;
    loading.stopAnimation();
}

// A function that moves the browser to a new list view.
/*function moveToView() {
    var stack = document.getElementById('stackLayout').object;
    var div = document.getElementById('listLevel');
    stack.addView(div, stack._viewsTransition[0]);
    browser.goForward(div, name, function() {setTimeout(function() {stack.removeView(div);}, 750);});
}*/

